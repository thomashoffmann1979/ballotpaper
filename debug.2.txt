
				checkMarks := []CheckMarks{}

				checkMarksList := []bool{}
				
				if circles.Cols() != maxCircles {
					checkMarkList = []CheckMarkList{}
				}

				if lastTitle!=ballotPaperTitle { 
					checkMarkList = []CheckMarkList{}
				}

				maxCircles = circles.Cols()
				for i := 0; i < circles.Cols(); i++ {
					v := circles.GetVecfAt(0, i)
					// if circles are found
					if len(v) > 2 {
						x := int(v[0])
						y := int(v[1])
						r := int(v[2])


						if r-4 < 0 {
							continue
						}
						if y-r +1 < 0 || x-r +1 <0 || y+r-2 > croppedMat.Rows() || x+r-2 > croppedMat.Cols() {	
							continue
						}


						rect_circle:=image.Rect(x-r +1, y-r +1, x+r-1, y+r-1)
						// fmt.Println(  rect_circle )
						rect_circleMat := croppedMat.Region(rect_circle)

						imgGray := gocv.NewMat()

						/*
						imgGrayCroppedMat := gocv.NewMat()
						defer imgGrayCroppedMat.Close()
						gocv.CvtColor(croppedMat.Clone(), &imgGrayCroppedMat, gocv.ColorBGRToGray)
						gocv.Threshold(imgGrayCroppedMat, &imgGrayCroppedMat, 127, 200, gocv.ThresholdBinary+gocv.ThresholdOtsu)
						xw.IMShow(imgGrayCroppedMat)
						*/
						
						gocv.CvtColor(rect_circleMat, &imgGray, gocv.ColorBGRToGray)
						gocv.Threshold(imgGray, &imgGray, 30, 255, gocv.ThresholdBinary+gocv.ThresholdOtsu)

						mean := imgGray.Mean()
						
						defer rect_circleMat.Close()
						defer imgGray.Close()
						
						/*
						if mean.Val1>180 {
							fmt.Println( fmt.Sprintf(" Circle A: %d \t X,Y,R %d,%d,%d " , i, x, y, r  ))
							}else{
							fmt.Println( fmt.Sprintf(" Circle B: %d \t X,Y,R %d,%d,%d " , i, x, y, r  ))
						}
						*/
						checkMarks = append(checkMarks, CheckMarks{mean.Val1, x, y, r})



						gocv.Circle(&croppedMat, image.Pt(x, y), r, blue, 2)

						gocv.Circle(&croppedMat, image.Pt(x, y), 2, red, 3)
					}


				}
				

				sort.Slice(checkMarks[:], func(i, j int) bool {
					return checkMarks[i].Y < checkMarks[j].Y
				})

				
				for i := 0; i < len(checkMarks); i++ {
					if i >= len(checkMarkList) {
						checkMarkList = append(checkMarkList, CheckMarkList{})
					}
					if checkMarks[i].Mean>150 {
						checkMarksList = append(checkMarksList, false)

						checkMarkList[i].Sum += 0
					}else{
						checkMarksList = append(checkMarksList, true)
						checkMarkList[i].Sum += 1
					}
					checkMarkList[i].Count++
					checkMarkList[i].AVG = float64(checkMarkList[i].Sum) / float64(checkMarkList[i].Count)
					checkMarkList[i].Checked = checkMarkList[i].AVG > 0.6
				}

				outList:=[]string{}
				for i := 0; i < len(checkMarkList); i++ {
					
					if checkMarkList[i].Checked {
						outList = append(outList, "ðŸ˜Ž")
					} else {
						outList = append(outList, "ðŸ¥¶")
					}
				}						
					if checkMarkList[0].Count>5 {
				fmt.Println( ballotPaperTitle, outList , checkMarkList[0].Count );
				gocv.IMWrite("original.jpg", img)
				
					}
				lastTitle = ballotPaperTitle

				roiwindow := gocv.NewWindow("roi")
				roiwindow.IMShow(croppedMat)
				